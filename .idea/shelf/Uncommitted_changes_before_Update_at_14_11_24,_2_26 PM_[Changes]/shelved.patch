Index: app/src/main/java/com/example/ecosplash/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ecosplash\n\nimport android.app.Application\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.activity.viewModels\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableLongStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.Font\nimport androidx.compose.ui.text.font.FontFamily\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.ecosplash.classes.Sombrero\nimport com.example.ecosplash.menus.EditMenu\nimport com.example.ecosplash.menus.MainMenu\nimport com.example.ecosplash.model.CoinManager\nimport com.example.ecosplash.model.InventoryManager\nimport com.example.ecosplash.model.StrikeManager\nimport com.example.ecosplash.model.UserData\nimport com.example.ecosplash.popups.MoreInfo\nimport com.example.ecosplash.popups.Stats\nimport com.example.ecosplash.topInterfaces.Firstopart\nimport com.example.ecosplash.topInterfaces.Secondtopart\nimport com.example.ecosplash.ui.theme.EcosplashTheme\nimport com.example.ecosplash.view.BackgroupsMenu\nimport kotlinx.coroutines.delay\nimport java.util.Locale\nimport java.util.concurrent.TimeUnit\n\nval montserratFontFamily = FontFamily(\n    Font(R.font.montserrat, FontWeight.Normal)\n)\nval tekoFontFamily = FontFamily(\n    Font(R.font.teko, FontWeight.Normal)\n)\n\nclass MainActivity1 : ComponentActivity() {\n\n    private val userData: UserData by viewModels()\n    private val coinManager: CoinManager by viewModels()\n    private val strikeManager: StrikeManager by viewModels()\n    private val inventoryManager: InventoryManager by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            EcosplashTheme {\n                Surface {\n                    Greeting1(\n                        userData = userData,\n                        coinManager = coinManager,\n                        strikeManager = strikeManager,\n                        inventoryManager = inventoryManager,\n                        imagenes = images(),\n                        backgrounds = backgrounds()\n                    )\n                }\n            }\n        }\n    }\n}\n\n\n@Composable\nfun formatTimer(timeMi: Long): String {\n    val min = TimeUnit.MILLISECONDS.toMinutes(timeMi) % 60\n    val sec = TimeUnit.MILLISECONDS.toSeconds(timeMi) % 60\n\n    return String.format(Locale.getDefault(), \"%02d:%02d\", min, sec)\n}\n\n@Composable\nfun Greeting1(\n    userData: UserData,\n    coinManager: CoinManager,\n    strikeManager: StrikeManager,\n    inventoryManager: InventoryManager,\n    imagenes: List<Painter>,\n    backgrounds: List<Sombrero>,\n    hats: List<Sombrero> = hats()\n) {\n\n    // -------------DECLARACIÓN DE VARIABLES --------------------------\n    // variable que se usa para el cambio de menus\n    var boxVisible by remember { mutableIntStateOf(1) }\n    // variable para mostrar o no el popup\n    var showDialog by remember { mutableStateOf(false) }\n    // mostrar dialogo de logros\n    var showAchivments by remember { mutableStateOf(false) }\n    // variable para mostrar o no el popup1\n    var showDialogStats by remember { mutableStateOf(false) }\n    // variable que define el progreso de la barra de nivel\n    var progress by remember { mutableFloatStateOf(0.0f) }\n    // nivel actual\n    var level by remember { mutableIntStateOf(0) }\n    // experiencia\n    var experience by remember { mutableIntStateOf(0) }\n    // experiencia total para el siguiente nivel\n    var totalExperience by remember { mutableIntStateOf(400) }\n    //variable que almacena la cantidad de monedas\n    var money by remember { mutableIntStateOf(0) }\n    // variable que almacena la cantidad de las rachas\n    var racha by remember { mutableIntStateOf(0) }\n    //variable que almacena el tiempo del temporizador\n    var time by remember { mutableLongStateOf(1200000L) }\n    //variable que sirve para identificar si el temporizadore está corriendo o no\n    var isRunning by remember { mutableStateOf(false) }\n    //variable para animación de pecera\n    val isRunningFishbowl by remember { mutableStateOf(true) }\n    val isRunningAjoAnimated by remember { mutableStateOf(true) }\n    // variable que cambia de acuerdo al frame de la animación de la pecera\n    var fishbowlIndex by remember { mutableIntStateOf(0) }\n    //variable que cambia de acuerdo al frame de la animación del ajolote\n    var ajoIndex by remember { mutableIntStateOf(0) }\n    // variable que almacenará las duchas totales\n    var duchasTotales by remember { mutableIntStateOf(0) }\n    var duchasMen5 by remember { mutableIntStateOf(0) }\n    var litrosAhorrados by remember { mutableFloatStateOf(0.0f) }\n\n    // -----------------DECLARACIÓN DE VALORES PARA MODIFICAR LAS VARIABLES --------------\n    // con esta variable es posible cambiar el valor de boxvisible\n    val onClick = { newState: Int -> boxVisible = newState }\n    // con esta variable es posible cambiar el valor de time\n    val setTime: (Long) -> Unit = { newTime -> time = newTime }\n    // con este valor es posible modificar isRunning\n    val setIsRunning: (Boolean) -> Unit = { running -> isRunning = running }\n    // valor para cambiar la variable booleana con la que se decide si mostrar o no el popup de información\n    val setInfoDialog: (Boolean) -> Unit = { newinfoDialog -> showDialog = newinfoDialog }\n    //valor para modificar el booleano del popup de las estadisticas\n    val setStatsDialog: (Boolean) -> Unit = { newinfoDialog -> showDialogStats = newinfoDialog }\n    //para modificar el booleano del popup de las logros\n    val setAchivmentDialig: (Boolean) -> Unit = { newAchivmentD -> showAchivments = newAchivmentD }\n    //valor para modificar lo del dinero\n    val setMoney: (Int) -> Unit = { moreMoney -> money = moreMoney }\n    // valor para modificar lo de la racha\n    val setRacha: (Int) -> Unit = { masRacha -> racha = masRacha }\n    // modifica el progreso de la barra\n    val setProgress: (Float) -> Unit = { newProgress -> progress = newProgress }\n    // actualiza la variable de las duchas totales\n    val setduchasTotales: (Int) -> Unit = { masduchasT -> duchasTotales = masduchasT }\n    // actializa la variable de las duchas menores a 5 minutos\n    val setduchasMen5: (Int) -> Unit = { masduchasMen5 -> duchasMen5 = masduchasMen5 }\n    // actualiza la cantidad de litros ahorrados\n    val setLitrosAhorrados: (Float) -> Unit =\n        { masLitrosAhorrados -> litrosAhorrados = masLitrosAhorrados }\n    // valor para cambiar la variable de experiencia\n    val setExperience: (Int) -> Unit = { newExperience -> experience = newExperience }\n    // valor para cambiar el nivel\n    val setLevel: (Int) -> Unit = { newLevel -> level = newLevel }\n    // valor para cambiar la experiencia necesaria para el siguiente nivel\n    val setTotalExperience: (Int) -> Unit = { newTotal -> totalExperience = newTotal }\n\n    val currentTank by userData.currentTank.observeAsState(initial = 0)\n    val currentSkin by userData.currentSkin.observeAsState(initial = 0)\n\n    BoxWithConstraints(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color(0xFFD9F1FF))\n    ) {\n        val maxWidth = maxWidth\n        val maxHeight = maxHeight\n\n        Image(\n            painter = imagenes[0],\n            contentDescription = \"imagen del cuarto\",\n            contentScale = ContentScale.Crop,\n            modifier = Modifier\n                .fillMaxWidth()\n                .offset(y = maxHeight * 0.25f)\n\n        )\n        Firstopart(\n            maxWidth = maxWidth,\n            maxHeight = maxHeight,\n            imagenes = imagenes,\n            setInfoDialog = setInfoDialog,\n            setAchivmentDialig = setAchivmentDialig\n        )\n        Secondtopart(\n            coinManager = coinManager,\n            strikeManager = strikeManager,\n            progress = progress,\n            maxWidth = maxWidth,\n            maxHeight = maxHeight,\n            imagenes = imagenes,\n            level = level\n        )\n        //Image(painter = fishbowlanimation[fishbowlIndex],\n        Image(\n            painter = backgrounds[currentTank].frames[fishbowlIndex],\n            contentDescription = \"imagen de la pecera\",\n            contentScale = ContentScale.Crop,\n            modifier = Modifier\n\n                .height(maxHeight * 0.4f)\n                .align(Alignment.Center)\n                .offset(y = maxHeight * 0.07f)\n        )\n        Image(\n            painter = hats[currentSkin].frames[ajoIndex],\n            contentDescription = \"imagen del ajolote\",\n            contentScale = ContentScale.Fit,\n            modifier = Modifier\n\n                .fillMaxSize()\n                .align(Alignment.Center)\n                .offset(y = maxHeight * 0.1f)\n                .offset(x = maxWidth * -0.1f)\n                .padding(maxHeight * 0.12f)\n\n        )\n        if (isRunning) {\n            Image(\n                painter = imagenes[14],\n                contentDescription = \"imagen del cuarto\",\n                contentScale = ContentScale.Fit,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .offset(y = maxHeight * 0.78f)\n                    .height(maxHeight * 0.1f)\n\n            )\n            Text(\n                text = formatTimer(timeMi = time),\n                style = TextStyle(fontSize = 40.sp),\n                fontFamily = tekoFontFamily,\n                modifier = Modifier\n                    .padding(9.dp)\n                    .align(Alignment.Center)\n                    .offset(y = maxHeight * 0.33f),\n                color = Color.White\n            )\n        }\n\n\n        if (boxVisible == 2 && !isRunning) {\n            Surface(\n                color = Color(0xFFFFFFFF),\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .align(Alignment.BottomEnd)\n                    //.height(maxHeight * 0.13f)\n                    .height(maxHeight * 0.20f)\n            ) {\n                EditMenu(imagenes = imagenes, maxHeight = maxHeight, onClick = onClick)\n            }\n        } else if (boxVisible == 1) {\n            Surface(\n                color = Color(0xFFFFFFFF),\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .align(Alignment.BottomEnd)\n                    .height(maxHeight * 0.13f)\n            ) {\n                MainMenu(\n                    coinManager = coinManager,\n                    strikeManager = strikeManager,\n                    imagenes = imagenes,\n                    maxHeight = maxHeight,\n                    onClick = onClick, time = setTime,\n                    isRunning = setIsRunning,\n                    isCurrentlyRunning = isRunning,\n                    currentTime = time,\n                    setMoney = setMoney,\n                    money = money,\n                    setRacha = setRacha,\n                    racha = racha,\n                    progress = progress,\n                    setProgress = setProgress,\n                    setStatsDialog = setStatsDialog,\n                    showDialogStats = showDialogStats,\n                    setduchasTotales = setduchasTotales,\n                    setLitrosAhorrados = setLitrosAhorrados,\n                    setduchasMen5 = setduchasMen5,\n                    duchasTotales = duchasTotales,\n                    duchasMen5 = duchasMen5,\n                    litrosAhorrados = litrosAhorrados,\n                    level = level,\n                    setLevel = setLevel,\n                    experience = experience,\n                    setExperience = setExperience,\n                    totalExperience = totalExperience,\n                    setTotalExperience = setTotalExperience\n                )\n\n            }\n        } else if (boxVisible == 3) {\n            Surface(\n                color = Color(0xFFFFFFFF),\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .align(Alignment.BottomEnd)\n                    //.height(maxHeight * 0.13f)\n                    .height(maxHeight * 0.24f)\n            ) {\n                BackgroupsMenu(\n                    userData = userData,\n                    coinManager = coinManager,\n                    inventoryManager = inventoryManager,\n                    imagenes = imagenes,\n                    maxHeight = maxHeight,\n                    onClick = onClick,\n                    backgrounds = backgrounds,\n                    switchMode = 0,\n                    currentImage = currentTank\n                )\n            }\n        } else if (boxVisible == 4) {\n            Surface(\n                color = Color(0xFFFFFFFF),\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .align(Alignment.BottomEnd)\n                    //.height(maxHeight * 0.13f)\n                    .height(maxHeight * 0.24f)\n            ) {\n                BackgroupsMenu(\n                    userData = userData,\n                    coinManager = coinManager,\n                    inventoryManager = inventoryManager,\n                    imagenes = imagenes,\n                    maxHeight = maxHeight,\n                    onClick = onClick,\n                    backgrounds = hats,\n                    switchMode = 1,\n                    currentImage = currentSkin\n                )\n            }\n        } else {\n            boxVisible = 1\n        }\n        if (showDialog) {\n            MoreInfo(onDismiss = { showDialog = false }, imagenes = imagenes, maxHeight = maxHeight)\n        }\n        if (showDialogStats) {\n            Stats(\n                onDismiss = { showDialogStats = false },\n                imagenes = imagenes,\n                maxHeight = maxHeight,\n                duchasTotales = duchasTotales,\n                duchasMen5 = duchasMen5,\n                litrosAhorrados = litrosAhorrados\n            )\n        }\n        if (showAchivments) {\n            MoreInfo(\n                onDismiss = { showAchivments = false },\n                imagenes = imagenes,\n                maxHeight = maxHeight\n            )\n        }\n    }\n    LaunchedEffect(isRunning) {\n        while (isRunning) {\n            delay(1000)\n            time -= 1000\n            if (time.toInt() == 0) {\n                isRunning = false\n                time = 600000\n            }\n        }\n    }\n    LaunchedEffect(isRunningFishbowl) {\n        while (isRunningFishbowl) {\n            delay(85)\n            fishbowlIndex = (fishbowlIndex + 1) % 44\n        }\n    }\n\n    LaunchedEffect(isRunningAjoAnimated) {\n        while (isRunningAjoAnimated) {\n            delay(100)\n            ajoIndex = (ajoIndex + 1) % 14\n        }\n    }\n}\n\n\n@Preview(showBackground = true)\n@Composable\nfun GreetingPreview1() {\n    EcosplashTheme {\n\n        Greeting1(\n            userData = UserData(Application()),\n            coinManager = CoinManager(Application()),\n            strikeManager = StrikeManager(Application()),\n            inventoryManager = InventoryManager(Application()),\n            imagenes = images(),\n            backgrounds = backgrounds()\n        )\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecosplash/MainActivity.kt b/app/src/main/java/com/example/ecosplash/MainActivity.kt
--- a/app/src/main/java/com/example/ecosplash/MainActivity.kt	(revision 8f7473631edc859a60bd664a7167aa12688d8068)
+++ b/app/src/main/java/com/example/ecosplash/MainActivity.kt	(date 1731524496894)
@@ -43,14 +43,15 @@
 import com.example.ecosplash.menus.MainMenu
 import com.example.ecosplash.model.CoinManager
 import com.example.ecosplash.model.InventoryManager
+import com.example.ecosplash.model.StatisticsManager
 import com.example.ecosplash.model.StrikeManager
 import com.example.ecosplash.model.UserData
 import com.example.ecosplash.popups.MoreInfo
-import com.example.ecosplash.popups.Stats
-import com.example.ecosplash.topInterfaces.Firstopart
-import com.example.ecosplash.topInterfaces.Secondtopart
+import com.example.ecosplash.topInterfaces.FirstTopPart
+import com.example.ecosplash.topInterfaces.SecondTopPart
 import com.example.ecosplash.ui.theme.EcosplashTheme
 import com.example.ecosplash.view.BackgroupsMenu
+import com.example.ecosplash.view.popup.Statistics
 import kotlinx.coroutines.delay
 import java.util.Locale
 import java.util.concurrent.TimeUnit
@@ -68,6 +69,7 @@
     private val coinManager: CoinManager by viewModels()
     private val strikeManager: StrikeManager by viewModels()
     private val inventoryManager: InventoryManager by viewModels()
+    private val statisticsManager: StatisticsManager by viewModels()
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -80,6 +82,7 @@
                         coinManager = coinManager,
                         strikeManager = strikeManager,
                         inventoryManager = inventoryManager,
+                        statisticsManager = statisticsManager,
                         imagenes = images(),
                         backgrounds = backgrounds()
                     )
@@ -104,6 +107,7 @@
     coinManager: CoinManager,
     strikeManager: StrikeManager,
     inventoryManager: InventoryManager,
+    statisticsManager: StatisticsManager,
     imagenes: List<Painter>,
     backgrounds: List<Sombrero>,
     hats: List<Sombrero> = hats()
@@ -159,24 +163,14 @@
     val setStatsDialog: (Boolean) -> Unit = { newinfoDialog -> showDialogStats = newinfoDialog }
     //para modificar el booleano del popup de las logros
     val setAchivmentDialig: (Boolean) -> Unit = { newAchivmentD -> showAchivments = newAchivmentD }
-    //valor para modificar lo del dinero
     val setMoney: (Int) -> Unit = { moreMoney -> money = moreMoney }
-    // valor para modificar lo de la racha
     val setRacha: (Int) -> Unit = { masRacha -> racha = masRacha }
-    // modifica el progreso de la barra
     val setProgress: (Float) -> Unit = { newProgress -> progress = newProgress }
-    // actualiza la variable de las duchas totales
     val setduchasTotales: (Int) -> Unit = { masduchasT -> duchasTotales = masduchasT }
-    // actializa la variable de las duchas menores a 5 minutos
     val setduchasMen5: (Int) -> Unit = { masduchasMen5 -> duchasMen5 = masduchasMen5 }
-    // actualiza la cantidad de litros ahorrados
-    val setLitrosAhorrados: (Float) -> Unit =
-        { masLitrosAhorrados -> litrosAhorrados = masLitrosAhorrados }
-    // valor para cambiar la variable de experiencia
+    val setLitrosAhorrados: (Float) -> Unit = { masLitrosAhorrados -> litrosAhorrados = masLitrosAhorrados }
     val setExperience: (Int) -> Unit = { newExperience -> experience = newExperience }
-    // valor para cambiar el nivel
     val setLevel: (Int) -> Unit = { newLevel -> level = newLevel }
-    // valor para cambiar la experiencia necesaria para el siguiente nivel
     val setTotalExperience: (Int) -> Unit = { newTotal -> totalExperience = newTotal }
 
     val currentTank by userData.currentTank.observeAsState(initial = 0)
@@ -199,14 +193,14 @@
                 .offset(y = maxHeight * 0.25f)
 
         )
-        Firstopart(
+        FirstTopPart(
             maxWidth = maxWidth,
             maxHeight = maxHeight,
             imagenes = imagenes,
             setInfoDialog = setInfoDialog,
             setAchivmentDialig = setAchivmentDialig
         )
-        Secondtopart(
+        SecondTopPart(
             coinManager = coinManager,
             strikeManager = strikeManager,
             progress = progress,
@@ -215,7 +209,6 @@
             imagenes = imagenes,
             level = level
         )
-        //Image(painter = fishbowlanimation[fishbowlIndex],
         Image(
             painter = backgrounds[currentTank].frames[fishbowlIndex],
             contentDescription = "imagen de la pecera",
@@ -269,7 +262,6 @@
                 modifier = Modifier
                     .fillMaxWidth()
                     .align(Alignment.BottomEnd)
-                    //.height(maxHeight * 0.13f)
                     .height(maxHeight * 0.20f)
             ) {
                 EditMenu(imagenes = imagenes, maxHeight = maxHeight, onClick = onClick)
@@ -320,7 +312,6 @@
                 modifier = Modifier
                     .fillMaxWidth()
                     .align(Alignment.BottomEnd)
-                    //.height(maxHeight * 0.13f)
                     .height(maxHeight * 0.24f)
             ) {
                 BackgroupsMenu(
@@ -341,7 +332,6 @@
                 modifier = Modifier
                     .fillMaxWidth()
                     .align(Alignment.BottomEnd)
-                    //.height(maxHeight * 0.13f)
                     .height(maxHeight * 0.24f)
             ) {
                 BackgroupsMenu(
@@ -363,13 +353,11 @@
             MoreInfo(onDismiss = { showDialog = false }, imagenes = imagenes, maxHeight = maxHeight)
         }
         if (showDialogStats) {
-            Stats(
+            Statistics(
+                statisticsManager = statisticsManager,
                 onDismiss = { showDialogStats = false },
                 imagenes = imagenes,
-                maxHeight = maxHeight,
-                duchasTotales = duchasTotales,
-                duchasMen5 = duchasMen5,
-                litrosAhorrados = litrosAhorrados
+                maxHeight = maxHeight
             )
         }
         if (showAchivments) {
@@ -416,6 +404,7 @@
             coinManager = CoinManager(Application()),
             strikeManager = StrikeManager(Application()),
             inventoryManager = InventoryManager(Application()),
+            statisticsManager = StatisticsManager(Application()),
             imagenes = images(),
             backgrounds = backgrounds()
         )
Index: app/src/main/java/com/example/ecosplash/topInterfaces/firstopart.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecosplash/topInterfaces/firstopart.kt b/app/src/main/java/com/example/ecosplash/topInterfaces/FirstTopPart.kt
rename from app/src/main/java/com/example/ecosplash/topInterfaces/firstopart.kt
rename to app/src/main/java/com/example/ecosplash/topInterfaces/FirstTopPart.kt
--- a/app/src/main/java/com/example/ecosplash/topInterfaces/firstopart.kt	(revision 8f7473631edc859a60bd664a7167aa12688d8068)
+++ b/app/src/main/java/com/example/ecosplash/topInterfaces/FirstTopPart.kt	(date 1731524302772)
@@ -20,7 +20,7 @@
 
 @Composable
 //esta función son los botones de logros e información
-fun Firstopart (setInfoDialog: (Boolean) -> Unit,
+fun FirstTopPart (setInfoDialog: (Boolean) -> Unit,
                 setAchivmentDialig: (Boolean) -> Unit,
                 imagenes: List<Painter>,
                 maxWidth: Dp, maxHeight: Dp,
Index: app/src/main/java/com/example/ecosplash/topInterfaces/secondtopart.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecosplash/topInterfaces/secondtopart.kt b/app/src/main/java/com/example/ecosplash/topInterfaces/SecondTopPart.kt
rename from app/src/main/java/com/example/ecosplash/topInterfaces/secondtopart.kt
rename to app/src/main/java/com/example/ecosplash/topInterfaces/SecondTopPart.kt
--- a/app/src/main/java/com/example/ecosplash/topInterfaces/secondtopart.kt	(revision 8f7473631edc859a60bd664a7167aa12688d8068)
+++ b/app/src/main/java/com/example/ecosplash/topInterfaces/SecondTopPart.kt	(date 1731524310228)
@@ -1,6 +1,5 @@
 package com.example.ecosplash.topInterfaces
 
-import androidx.annotation.IntegerRes
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
@@ -35,7 +34,7 @@
 
 @Composable
 // esta función es un surface que contiene el nivel, la barra de nivel, la racha y el dinero
-fun Secondtopart(
+fun SecondTopPart(
     coinManager: CoinManager,
     strikeManager: StrikeManager,
     imagenes: List<Painter>,
Index: app/src/main/java/com/example/ecosplash/view/popup/Statistics.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecosplash/view/popup/Statistics.kt b/app/src/main/java/com/example/ecosplash/view/popup/Statistics.kt
new file mode 100644
--- /dev/null	(date 1731524021732)
+++ b/app/src/main/java/com/example/ecosplash/view/popup/Statistics.kt	(date 1731524021732)
@@ -0,0 +1,74 @@
+package com.example.ecosplash.view.popup
+
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.livedata.observeAsState
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.painter.Painter
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import com.example.ecosplash.model.StatisticsManager
+import com.example.ecosplash.montserratFontFamily
+
+@Composable
+fun Statistics(
+    statisticsManager: StatisticsManager,
+    onDismiss: () -> Unit,
+    imagenes: List<Painter>,
+    maxHeight: Dp
+) {
+
+    val totalShowers by statisticsManager.totalShowers.observeAsState(initial = 0)
+    val quickShowers by statisticsManager.totalShowers.observeAsState(initial = 0)
+    val litersSaved by statisticsManager.litersSaved.observeAsState(initial = 0)
+
+    androidx.compose.material3.AlertDialog(
+        onDismissRequest = onDismiss,
+        confirmButton = { /*TODO*/ },
+        text = {
+            Column {
+                IconButton(
+                    onClick = onDismiss,
+                    modifier = Modifier
+                        .height((maxHeight * 0.06f))
+                ) {
+                    Image(
+                        painter = imagenes[13],
+                        contentDescription = "icono de X",
+                        contentScale = ContentScale.FillWidth,
+                        modifier = Modifier
+                            .fillMaxSize()
+
+                    )
+                }
+                Text(
+                    text = "Duchas totales: $totalShowers \n" +
+                            "\n" +
+                            "Duchas menores a 5 munutos: $quickShowers \n" +
+                            "\n" +
+                            "Litros de agua ahorrados: $litersSaved L",
+                    modifier = Modifier.padding(16.dp),
+                    style = TextStyle(fontSize = 20.sp),
+                    fontFamily = montserratFontFamily,
+                    color = Color.Black
+                )
+            }
+
+        },
+        containerColor = Color(0xFFCBE2FE),
+        modifier = Modifier
+            .height(maxHeight * 0.45f)
+            .padding(8.dp)
+    )
+}
Index: app/src/main/java/com/example/ecosplash/model/StatisticsManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecosplash/model/StatisticsManager.kt b/app/src/main/java/com/example/ecosplash/model/StatisticsManager.kt
new file mode 100644
--- /dev/null	(date 1731521362767)
+++ b/app/src/main/java/com/example/ecosplash/model/StatisticsManager.kt	(date 1731521362767)
@@ -0,0 +1,105 @@
+package com.example.ecosplash.model
+
+import android.app.Application
+import androidx.datastore.preferences.core.edit
+import androidx.datastore.preferences.core.floatPreferencesKey
+import androidx.datastore.preferences.core.intPreferencesKey
+import androidx.datastore.preferences.core.stringPreferencesKey
+import androidx.lifecycle.AndroidViewModel
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.viewModelScope
+import kotlinx.coroutines.flow.first
+import kotlinx.coroutines.launch
+
+class StatisticsManager(application: Application): AndroidViewModel(application) {
+
+    private val totalShowersKey = intPreferencesKey("quickShowers")
+    private val quickShowersKey = intPreferencesKey("quickShowers")
+    private val litersSavedKey = floatPreferencesKey("litersSaved")
+
+    private val _totalShowers = MutableLiveData<Int>()
+    private val _quickShowers = MutableLiveData<Int>()
+    private val _litersSaved = MutableLiveData<Float>()
+
+    val totalShowers: LiveData<Int> get() = _totalShowers
+    val quickShowers: LiveData<Int> get() = _quickShowers
+    val litersSaved: LiveData<Float> get() = _litersSaved
+
+    init {
+        loadTotalShowers()
+        loadQuickShowers()
+        loadLitersSaved()
+    }
+
+    private fun loadTotalShowers() {
+        viewModelScope.launch {
+            val preferences = getApplication<Application>().dataStore.data.first()
+            val storedTotalShowers = preferences[totalShowersKey] ?: 0
+            _totalShowers.value = storedTotalShowers
+        }
+    }
+
+    private fun loadQuickShowers() {
+        viewModelScope.launch {
+            val preferences = getApplication<Application>().dataStore.data.first()
+            val storedQuickShowers = preferences[quickShowersKey] ?: 0
+            _quickShowers.value = storedQuickShowers
+        }
+    }
+
+    private fun loadLitersSaved() {
+        viewModelScope.launch {
+            val preferences = getApplication<Application>().dataStore.data.first()
+            val storedLitersSaved = preferences[litersSavedKey] ?: 0.0f
+            _litersSaved.value = storedLitersSaved
+        }
+    }
+
+    private fun saveTotalShowers(value: Int) {
+        viewModelScope.launch {
+            getApplication<Application>().dataStore.edit { preferences ->
+                preferences[totalShowersKey] = value
+            }
+        }
+    }
+
+    private fun saveQuickShowers(value: Int) {
+        viewModelScope.launch {
+            getApplication<Application>().dataStore.edit { preferences ->
+                preferences[quickShowersKey] = value
+            }
+        }
+    }
+
+    private fun saveLitersSaved(value: Float) {
+        viewModelScope.launch {
+            getApplication<Application>().dataStore.edit { preferences ->
+                preferences[litersSavedKey] = value
+            }
+        }
+    }
+
+    fun addShowers() {
+        val newAmount = (_totalShowers.value ?: 0) + 1
+        _totalShowers.value = newAmount
+        saveTotalShowers(newAmount)
+    }
+    fun addQuickShowers() {
+        val newAmount = (_quickShowers.value ?: 0) + 1
+        _quickShowers.value = newAmount
+        saveQuickShowers(newAmount)
+    }
+    fun addLitersSaved(amount: Float) {
+        val newAmount = (_litersSaved.value ?: 0.0f) + amount
+        _litersSaved.value = newAmount
+        saveLitersSaved(newAmount)
+    }
+
+    fun resetQuickShowers() {
+        val newAmount = 0
+        _quickShowers.value = newAmount
+        saveQuickShowers(newAmount)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/ecosplash/popups/MoreInfo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ecosplash.popups\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.ecosplash.montserratFontFamily\n\n@Composable\nfun MoreInfo(onDismiss:()-> Unit, imagenes: List<Painter>, maxHeight: Dp) {\n    androidx.compose.material3.AlertDialog(\n        onDismissRequest =  onDismiss,\n        confirmButton = { /*TODO*/ },\n        text = {\n            Column {\n                IconButton(onClick = onDismiss,\n                    modifier = Modifier\n                        .height((maxHeight * 0.06f))\n                ) {\n                    Image(\n                        painter = imagenes[13],\n                        contentDescription = \"icono de X\",\n                        contentScale = ContentScale.FillWidth,\n                        modifier = Modifier\n                            .fillMaxSize()\n                    )\n                }\n                Text(\n                    text = \"El objetivo de la aplicación es concientizar sobre el desperdicio y uso desmedido del agua, ya que este es un recurso limitado del cual todos debemos cuidar, generando una red de acción ciudadana. Para mas información visita el Facebook de @Eco Espacio Digital\",\n                    modifier = Modifier.padding(16.dp),\n                    fontFamily = montserratFontFamily,\n                    color = Color.Black\n                )\n            }\n\n        },\n        containerColor = Color(0xFFCBE2FE),\n        modifier = Modifier\n            .height(maxHeight * 0.5f)\n            .padding(8.dp)\n    )\n}\n\n@Composable\nfun Stats(onDismiss:()-> Unit,\n          imagenes: List<Painter>,\n          maxHeight: Dp,\n          duchasTotales: Int,\n          duchasMen5: Int,\n          litrosAhorrados: Float) {\n    androidx.compose.material3.AlertDialog(\n        onDismissRequest =  onDismiss,\n        confirmButton = { /*TODO*/ },\n        text = {\n            Column {\n                IconButton(onClick = onDismiss,\n                    modifier = Modifier\n                        .height((maxHeight * 0.06f))\n                ) {\n                    Image(painter = imagenes[13],\n                        contentDescription = \"icono de X\",\n                        contentScale = ContentScale.FillWidth,\n                        modifier = Modifier\n                            .fillMaxSize()\n\n                    )\n                }\n                Text(\n                    text = \"Duchas totales: $duchasTotales \\n\" +\n                            \"\\n\" +\n                    \"Duchas menores a 5 munutos: $duchasMen5 \\n\" +\n                            \"\\n\" +\n                    \"Litros de agua ahorrados: $litrosAhorrados L\",\n                    modifier = Modifier.padding(16.dp),\n                    style = TextStyle(fontSize = 20.sp),\n                    fontFamily = montserratFontFamily,\n                    color = Color.Black\n                )\n            }\n\n        },\n        containerColor = Color(0xFFCBE2FE),\n        modifier = Modifier\n            .height(maxHeight * 0.45f)\n            .padding(8.dp)\n    )\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecosplash/popups/MoreInfo.kt b/app/src/main/java/com/example/ecosplash/popups/MoreInfo.kt
--- a/app/src/main/java/com/example/ecosplash/popups/MoreInfo.kt	(revision 8f7473631edc859a60bd664a7167aa12688d8068)
+++ b/app/src/main/java/com/example/ecosplash/popups/MoreInfo.kt	(date 1731522860736)
@@ -51,51 +51,4 @@
             .height(maxHeight * 0.5f)
             .padding(8.dp)
     )
-}
-
-@Composable
-fun Stats(onDismiss:()-> Unit,
-          imagenes: List<Painter>,
-          maxHeight: Dp,
-          duchasTotales: Int,
-          duchasMen5: Int,
-          litrosAhorrados: Float) {
-    androidx.compose.material3.AlertDialog(
-        onDismissRequest =  onDismiss,
-        confirmButton = { /*TODO*/ },
-        text = {
-            Column {
-                IconButton(onClick = onDismiss,
-                    modifier = Modifier
-                        .height((maxHeight * 0.06f))
-                ) {
-                    Image(painter = imagenes[13],
-                        contentDescription = "icono de X",
-                        contentScale = ContentScale.FillWidth,
-                        modifier = Modifier
-                            .fillMaxSize()
-
-                    )
-                }
-                Text(
-                    text = "Duchas totales: $duchasTotales \n" +
-                            "\n" +
-                    "Duchas menores a 5 munutos: $duchasMen5 \n" +
-                            "\n" +
-                    "Litros de agua ahorrados: $litrosAhorrados L",
-                    modifier = Modifier.padding(16.dp),
-                    style = TextStyle(fontSize = 20.sp),
-                    fontFamily = montserratFontFamily,
-                    color = Color.Black
-                )
-            }
-
-        },
-        containerColor = Color(0xFFCBE2FE),
-        modifier = Modifier
-            .height(maxHeight * 0.45f)
-            .padding(8.dp)
-    )
-}
-
-
+}
\ No newline at end of file
